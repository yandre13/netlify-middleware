// Generated by Xata Codegen 0.23.2. Please do not edit.
import { buildClient } from '@xata.io/client'
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from '@xata.io/client'

const tables = [
  {
    name: 'subscribers',
    columns: [
      { name: 'name', type: 'string' },
      { name: 'email', type: 'email', unique: true },
      { name: 'age', type: 'int' },
    ],
  },
  {
    name: 'pages',
    columns: [
      { name: 'slug', type: 'string', unique: true },
      { name: 'title', type: 'string' },
    ],
  },
] as const

export type SchemaTables = typeof tables
export type InferredTypes = SchemaInference<SchemaTables>

export type Subscribers = InferredTypes['subscribers']
export type SubscribersRecord = Subscribers & XataRecord

export type Pages = InferredTypes['pages']
export type PagesRecord = Pages & XataRecord

export type DatabaseSchema = {
  subscribers: SubscribersRecord
  pages: PagesRecord
}

const DatabaseClient = buildClient()

const defaultOptions = {
  databaseURL:
    'https://Yaser-Andre-s-workspace-hre58l.us-east-1.xata.sh/db/devbase',
}

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables)
  }
}

let instance: XataClient | undefined = undefined

export const getXataClient = (...opts: any) => {
  if (instance) return instance

  instance = new XataClient(...opts)
  return instance
}
